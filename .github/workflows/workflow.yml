# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: Maven Package

env:
  DOCKER_HUB_REPO: adedamola13/myapp

on:  
  push:  
    branches: ['master']  

jobs:  
  build:  
    runs-on: ubuntu-latest  
    permissions:  
      contents: read  
      packages: write  

      services:
        postgres:
          image: postgres:13
          env:
            POSTGRES_USER: postgres
            POSTGRES_PASSWORD: Oluwaseun!23
            POSTGRES_DB: postgres
          options: >- 
            --health-cmd "pg_isready -U postgres"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          ports:
            - 5432:5432

    steps:  
      - uses: actions/checkout@v4  
      with:
         fetch-depth: 0

    - name: Wait for postgres to be ready
      run: |
        for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              echo "Postgres is ready"
              break
            fi
            echo "Waiting for postgres..."
            sleep 1
        done

      - name: Set up JDK 17  
        uses: actions/setup-java@v4  
        with:  
          java-version: '17'  
          distribution: 'temurin'  
          server-id: github  # Value of the distributionManagement/repository/id field of the pom.xml  
          settings-path: ${{ github.workspace }}  # location for the settings.xml file  

      - name: Build with Maven  
        run: mvn -B package --file pom.xml  

      - name: Log in to Docker Hub  
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin  

      - name: Set Up Docker Buildx  
        run: |  
          docker buildx create --name multimarch-builder --use  
          docker buildx inspect --bootstrap  
      - name: Build and push Docker image to Docker Hub  
        run: |  
          docker buildx build --platform linux/amd64,linux/arm64 \
          -t ${{ env.DOCKER_HUB_REPO }}:latest \
          -t ${{ env.DOCKER_HUB_REPO }}:$GITHUB_SHA \
          --push .
